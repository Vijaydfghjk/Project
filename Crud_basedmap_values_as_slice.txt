package main

import (
	"fmt"
	"sort"
)

type data struct {
	id   int
	name string
}

type roll struct {
	store []data
}

func controll() *roll {

	return &roll{store: make([]data, 0)}
}

func (a *roll) adding(b data) {

	a.store = append(a.store, b)
}

func (a *roll) update(id int, b data) {

	for i, _ := range a.store {

		if a.store[i].id == id {

			a.store[i].name = b.name

		}

	}

}

func (a *roll) remove(id int) {

	for i, _ := range a.store {

		if a.store[i].id == id {

			fmt.Println("check", i)
			a.store = append(a.store[:i], a.store[i+1:]...)
			break
		}
	}

	fmt.Println("After removed", a.store)
}

func (a *roll) view() {

	fmt.Println(a.store)
}

func (a *roll) duplicate_byid() {

	sort.Slice(a.store, func(i, j int) bool {

		return a.store[i].id < a.store[j].id
	})
	c := 1

	for i := 1; i < len(a.store); i++ {

		if a.store[i].id != a.store[i-1].id {

			a.store[c] = a.store[i]
			c++
		}

	}

	a.store = a.store[:c]
	fmt.Println("Viewing by unique id", a.store)
}

func (a *roll) duplicate_byname() {

	temp := make(map[string]bool)
	//values := make([]data, len(a.store))
	values := []data{}
	for i, v := range a.store {

		if temp[a.store[i].name] == false {

			temp[a.store[i].name] = true
			//values[i] = v
			values = append(values, v)
		}

	}
	fmt.Println("Viewwing by only unique name ", values)

}

func main() {

	vj := controll()

	t1 := data{id: 1, name: "ram"}
	t2 := data{id: 2, name: "vino"}
	t4 := data{id: 3, name: "joe"}
	t5 := data{id: 2, name: "vino"}
	t6 := data{id: 4, name: "vino"}

	vj.adding(t6)
	vj.adding(t5)
	vj.adding(t1)
	vj.adding(t2)
	vj.adding(t4)
	//vj.view()

	t3 := data{id: 2, name: "vijay"}
	vj.update(2, t3)
	//
	//vj.remove(3)
	vj.duplicate_byid()
	//vj.view()
	vj.duplicate_byname()
}
